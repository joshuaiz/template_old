//   Grids + Sass generated by Gridset: https://gridsetapp.com
//
//   Note ---------------------------------------------------------
//
// * The Gridset Sass output is divided into two types: functions and mixins. 
//   
// * prefix = the grid prefix you defined in your set.
//   
// * Containers are optional. Use these when a span is nested within another span. So an element spanning columns 2-3 inside 
//   an element spanning 1-5 would be: gs-span(prefix, 2, 3, (1, 5))
//   
// * When passing arguments, use false for null arguments, so a span with no end would be: gs-span(x, 2), but a span 
//   with no end and a container would be: gs-span(prefix, 2, false, (1, 5))
//   
// * Use IE flags ($ie) when building styles for Internet Explorer 8 and below. You can use either 'ie' or 'true'. 
//   A span in IE would be: gs-span(prefix, 2, 3, false, ie) or gs-span(prefix, 2, 3, false, true)
//
// * Setting *display unit* to true will return the unit with the measurement (ex: 30% or 300px). Default is false.
//   
// * You will need to write your own media queries for different screen sizes. You can generate these based on your 
//   grid widths by using the gs-media function. This will only work in Sass versions 3.2 and up. 
//
// * Use min, max and min-max define the type of query: min-width, max-width, or both, respectively. Here is an example:
//   
//   @include gs-media(prefix, max) {
//   	
//   	-- CSS goes here --
//   	
//   }
//     
//   Functions ----------------------------------------------------
//
//   Functions will return an exact measurement (float) for specific properties.
//   
// * gs-grid(prefix)
//   Returns a list of all column widths (in percentages) in a grid.
//   
// * gs-constraints(prefix)
//   Returns a list of all column widths in a grid that are constrained to a width, min-width, or max-width.
//
// * gs-gutter(prefix, (container start, container end), display unit)
//   Returns the exact gutter of a grid as a numeric value.
//   
// * gs-width(prefix, start, end, (container start, container end), display unit)
//   Returns the exact width measurement of the span of columns as a numeric value.
//   
// * gs-marginleft(prefix, start, (container start, container end), display unit)
//   Returns the exact left offset of a span as a numeric value.
//
// * gs-adjust(prefix, measurement, (container start, container end), display unit)
//   Returns a nested measurement adjusted for the width of the container.
//
//   -------------------------------------------------------------- 

@function gs-grid($prefix){

  @if $prefix == tg	{ @return (60.56727358036454,37.43272641963546); }
  @if $prefix == tf	{ @return (12.571428572461224,12.571428572461224,12.571428572461224,12.571428571204084,12.57142857214694,12.57142857214694,12.57142856711837); }
  @if $prefix == tt	{ @return (7.416666667782698,7.416666667782698,7.416666667782698,7.41666666704103,7.416666667597281,7.416666667597281,7.416666664630612,7.416666664206804,7.416666666802637,7.41666666606097,7.41666666672847,7.416666665986805); }

}

@function gs-contraints($prefix){
  
  @if $prefix == tg	{ @return (false,false); }
  @if $prefix == tf	{ @return (false,false,false,false,false,false,false); }
  @if $prefix == tt	{ @return (false,false,false,false,false,false,false,false,false,false,false,false); }

}

@function gs-gutter($prefix, $container: false, $unit:false){
  
  $gutter: 0;

  @if $prefix == tg	{ $gutter: 2; }
  @if $prefix == tf	{ $gutter: 2; }
  @if $prefix == tt	{ $gutter: 1; }

  @if $unit == true { @return #{gs-adjust($prefix, $gutter, $container) + '%'}; }
  @else { @return gs-adjust($prefix, $gutter, $container); }
	
}

@function gs-width($grid, $start, $end: false, $container: false, $unit: false){

  $cols: gs-grid($grid);
  $gutter: gs-gutter($grid);
  $measure: 0;
  $gutters: 0;
  $i: $start;

  @if $end != false {

    @if ($end - $start) > 0 { $gutters: ($gutter * ($end - $start)); }

    @while $i <= $end {
						
      $measure: $measure + nth($cols,$i);
      $i: $i + 1;

    }

  }
  @else {
		
    $conscols: gs-contraints($grid);
    $conscol: nth($conscols,$start);
		
    @if ($conscol != false) and ($unit == true) { @return #{$conscol}; }
		
    $measure: nth($cols,$start);

  }
	
  @if $unit == true { @return #{gs-adjust($grid, $measure + $gutters, $container) + '%'}; }
  @else { @return gs-adjust($grid, $measure + $gutters, $container); }

}

@function gs-marginleft($grid, $spanstart, $container: false, $unit: false){

  @if ($container == false and $spanstart > 1) or ($container != false and $spanstart > nth($container,1)) {

    $start: 1;
    $end: $spanstart - 1;
    
    @if $container != false { $start: nth($container,1); }
    @if $end == $start { $end: false; }
    
    $margin: gs-width($grid, $start, $end);
    $gutter: gs-gutter($grid);
		
    @if $unit == true { @return #{gs-adjust($grid, $margin + $gutter, $container) + '%'}; }
    @else { @return gs-adjust($grid, $margin + $gutter, $container); }

  }
  @else {

    @return 0;

  }

}

@function gs-adjust($grid, $measure, $container: false, $unit: false){
	
  $containerend: false;
  @if length($container) == 2 { $containerend: nth($container,2); }
	
  @if $container != false {

    $adjusted: $measure / gs-width($grid, nth($container,1), $containerend);
    
    @if $unit == true { @return #{($adjusted * 100) + '%'}; }
    @else { @return $adjusted * 100; }

  }
  @else {
	
    @if $unit == true { @return #{$measure + '%'}; }
    @else { @return $measure; }

  }

}

//   Mixins  ------------------------------------------------------
//
//   The Gridset mixins include every property you need to position or add padding to an element, using the functions
//   to calculate these properties.
//   
// * gs-span(prefix, start, end, (container start, container end), IE flag)
//   All of the properties you need to place your element on grid. Enter *all* for 100% width items. 
//   An IE flag of *ie* or *true* (without the astericks) will return special styles for Internet Explorer 8 and below.
//   
// * gs-pad(prefix, padding type, (container start, container end))
//   All of the properties you need to add the different types of padding to an element. 
//   Valid types: pad, padfull, padin, padinfull
//   Explanation of padding types here: https://gridsetapp.com/documentation/classes/
//   
// * gs-float(prefix, direction, (container start, container end))
//   All of the properties you need to float an element in one direction and give it the proper amount of margin 
//   in the opposite direction. Direction = left or right.
//   
// * gs-media(prefix, type)
//   This will generate the appropriate media query for a particular grid based on the range min or max for each grid.
//   If the type is invalid, the styles will be generated without a media query. (Sass versions 3.2+ only)
//   Valid types: min, max, min-max
//   *min* will output a media query for the range min, *max* will output a media query for the 
//   range max, and *min-max* will use both (bookending the query).
//   
//   -------------------------------------------------------------- 

@mixin gs-media($prefix, $type: false){


}

@mixin gs-span($grid, $start, $end: false, $container: false, $ie: false){
	
  @if $start == all {
	
    clear: both;
    display: block;
    float: left;
    margin-left: 0;
    width: 100%;
		
  }
  @else {
  
    $marginright: -100%;
    @if ($ie == ie) or ($ie == true) { $marginright: -99.9%; }
	
    display: block;
    float: left;
    margin-left: gs-marginleft($grid, $start, $container, true);  
    margin-right: $marginright;
    width: gs-width($grid, $start, $end, $container, true);
	  
  }

}

@mixin gs-pad($grid, $type: pad, $container: false){

  $pad: 0;

  @if $type == pad or $type == padin {

    $pad: (gs-gutter($grid) / 2);

  }
  @else if $type == padfull or $type == padinfull {

    $pad: gs-gutter($grid);

  }

  @if $container != false { $pad: gs-adjust($grid, $pad, $container); }

  @if $type == pad or $type == padfull {

    left: #{'-' + $pad + '%'};
    position: relative;

  }
  @else if $type == padin or $type == padinfull {

    -moz-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;

  }

  padding-left: #{$pad + '%'};
  padding-right: #{$pad + '%'};

}

@mixin gs-float($grid, $direction, $container: false){
	
  $margin: gs-gutter($grid);
  @if $container != false { $margin: gs-adjust($grid, $margin, $container); }
	
  clear: none;
  float: $direction;
  
  @if $direction == left {
  
    margin-left: 0;
    margin-right: #{$margin + '%'};
  	
  }
  @else if $direction == right {
  
    margin-right: 0;
    margin-left: #{$margin + '%'};
  	
  }
  
}

//   Variables  ---------------------------------------------------
//
//   Information about your grids and measurements to use in your own Sass functions.
//   
//   -------------------------------------------------------------- 

$gs-prefixes: tg, tf, tt;


@mixin grid-col {
  float: left;
  padding-right: 0.75em;

}

// the last column
.last-col {
  float: right;
  padding-right: 0 !important;
}

/*
Mobile Grid Styles
These are the widths for the mobile grid.
There are four types, but you can add or customize
them however you see fit.
*/
// @media (max-width: 767px) {

//   .m-tg-all {
//     @include grid-col;
//     width: 100%;
//     padding-right: 0;
//   }

//   .m-tg-1 {
//     @include grid-col;
//     width: 61.8%;
//   }

//   .m-tg-2 {
//     @include grid-col;
//     width: 38.2%;
//   }


// } // end mobile styles

@media (max-width: 767px) {
  @include gs-media(tg, max);
}


/* Portrait tablet to landscape */
// @media (min-width: 768px) and (max-width: 1029px) {

//   .t-tg-all {
//     @include grid-col;
//     width: 100%;
//     padding-right: 0;
//   }

//   .t-tg-1 {
//     @include grid-col;
//     width: 61.8%;
//   }

//   .t-tg-2 {
//     @include grid-col;
//     width: 38.2%;
//   }

//   .t-2of3 {
//     @include grid-col;
//     width: 66.66%;
//   }

//   .t-1of4 {
//     @include grid-col;
//     width: 25%;
//   }

//   .t-3of4 {
//     @include grid-col;
//     width: 75%;
//   }

//   .t-1of5 {
//     @include grid-col;
//     width: 20%;
//   }

//   .t-2of5 {
//     @include grid-col;
//     width: 40%;
//   }

//   .t-3of5 {
//     @include grid-col;
//     width: 60%;
//   }

//   .t-4of5 {
//     @include grid-col;
//     width: 80%;
//   }

// } // end tablet

// /* Landscape to small desktop */
// @media (min-width: 1030px) {

//   .d-tg-all  {
//     @include grid-col;
//     width: 100%;
//     padding-right: 0;
//   }

//   .d-tg-1 {
//     @include grid-col;
//     width: 61.8%;
//   }

//   .d-tg-2 {
//     @include grid-col;
//     width: 38.2%;
//   }

//   .d-2of3 {
//     @include grid-col;
//     width: 66.66%;
//   }

//   .d-1of4 {
//     @include grid-col;
//     width: 25%;
//   }

//   .d-3of4 {
//     @include grid-col;
//     width: 75%;
//   }

//   .d-1of5 {
//     @include grid-col;
//     width: 20%;
//   }

//   .d-2of5 {
//     @include grid-col;
//     width: 40%;
//   }

//   .d-3of5 {
//     @include grid-col;
//     width: 60%;
//   }

//   .d-4of5 {
//     @include grid-col;
//     width: 80%;
//   }

//   .d-1of6 {
//     @include grid-col;
//     width: 16.6666666667%;
//   }

//   .d-1of7 {
//     @include grid-col;
//     width: 14.2857142857%;
//   }

//   .d-2of7 {
//     @include grid-col;
//     width: 28.5714286%;
//   }

//   .d-3of7 {
//     @include grid-col;
//     width: 42.8571429%;
//   }

//   .d-4of7 {
//     @include grid-col;
//     width: 57.1428572%;
//   }

//   .d-5of7 {
//     @include grid-col;
//     width: 71.4285715%;
//   }

//   .d-6of7 {
//     @include grid-col;
//     width: 85.7142857%;
//   }

//   .d-1of8 {
//     @include grid-col;
//     width: 12.5%;
//   }

//   .d-1of9 {
//     @include grid-col;
//     width: 11.1111111111%;
//   }

//   .d-1of10 {
//     @include grid-col;
//     width: 10%;
//   }

//   .d-1of11 {
//     @include grid-col;
//     width: 9.09090909091%;
//   }

//   .d-1of12 {
//     @include grid-col;
//     width: 8.33%;
//   }

// } // end desktop styles